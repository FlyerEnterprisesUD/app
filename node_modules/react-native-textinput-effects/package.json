{
  "_args": [
    [
      {
        "escapedName": "react-native-textinput-effects",
        "name": "react-native-textinput-effects",
        "raw": "react-native-textinput-effects",
        "rawSpec": "",
        "scope": null,
        "spec": "latest",
        "type": "tag"
      },
      "/Users/ajaypatnaik/Desktop/app"
    ]
  ],
  "_from": "react-native-textinput-effects@latest",
  "_id": "react-native-textinput-effects@0.3.1",
  "_inCache": true,
  "_location": "/react-native-textinput-effects",
  "_nodeVersion": "6.3.1",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/react-native-textinput-effects-0.3.1.tgz_1493827879232_0.042727024061605334"
  },
  "_npmUser": {
    "email": "hbilir@gmail.com",
    "name": "halilb"
  },
  "_npmVersion": "3.10.3",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "react-native-textinput-effects",
    "name": "react-native-textinput-effects",
    "raw": "react-native-textinput-effects",
    "rawSpec": "",
    "scope": null,
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-native-textinput-effects/-/react-native-textinput-effects-0.3.1.tgz",
  "_shasum": "75e3733dd3b01cc6fae8c7abef2ea2228058409f",
  "_shrinkwrap": null,
  "_spec": "react-native-textinput-effects",
  "_where": "/Users/ajaypatnaik/Desktop/app",
  "author": {
    "email": "hbilir@gmail.com",
    "name": "Halil Bilir"
  },
  "bugs": {
    "url": "https://github.com/halilb/react-native-textinput-effects/issues"
  },
  "dependencies": {},
  "description": "TextInput effects for react native",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "75e3733dd3b01cc6fae8c7abef2ea2228058409f",
    "tarball": "https://registry.npmjs.org/react-native-textinput-effects/-/react-native-textinput-effects-0.3.1.tgz"
  },
  "gitHead": "6df43ad049f1c7d13ba48c1850cb8efd7eaff7e2",
  "homepage": "https://github.com/halilb/react-native-textinput-effects#readme",
  "keywords": [
    "react",
    "react-component",
    "react-native",
    "text input",
    "textinput",
    "textfield",
    "animation",
    "animated",
    "ios",
    "android"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "email": "hbilir@gmail.com",
      "name": "halilb"
    }
  ],
  "name": "react-native-textinput-effects",
  "optionalDependencies": {},
  "readme": "# React Native Textinput Effects\n\nI've come across with [those beautiful](http://tympanus.net/Development/TextInputEffects) text inputs created and [blogged](http://tympanus.net/codrops/2015/01/08/inspiration-text-input-effects) by **Codrops** and wanted to port them to react-native. Some of those text fields are now ready to use in iOS and android thanks to react-native.\n\nThere is also a native iOS library called [TextFieldEffects](https://github.com/raulriera/TextFieldEffects) which has built some of them in Swift.\n\n![](screenshots/full.gif)\n\n## Installation \n`$ npm install react-native-textinput-effects --save`\n\nYou also need to install [react-native-vector-icons](https://github.com/oblador/react-native-vector-icons) if you'd like to use a TextInputEffect component with an icon. Please check out [Installation section](https://github.com/oblador/react-native-vector-icons#installation) on that project.\n\n## How to use\n\n### Common Props\n\n| Prop | Type | Description |\n|---|---|---|\n|**`label`**|String|Displayed as placeholder string of the input.|\n|**`style`**|View Style Object|Applied to the root container of the input.|\n|**`labelStyle`**|View Style Object|Applied to the container of the label view.|\n|**`inputStyle`**|Text Style Object|Applied to the TextInput component.|\n|**`value`**|String|This value will be applied to the TextInput and change it's state on every render. Use this prop if you want a [Controlled Component](https://facebook.github.io/react/docs/forms.html#controlled-components).|\n|**`defaultValue`**|String|If you want to initialize the component with a non-empty value, you can supply a defaultValue prop. This prop creates an [Uncontrolled Component](https://facebook.github.io/react/docs/forms.html#uncontrolled-components) and is only used during initial render.|\n\nYou can also use default [TextInput Props](https://facebook.github.io/react-native/docs/textinput.html#props). They'll be passed into TextInput component. E.g., use `TextInput`'s `onChange` prop to be notified on text changes.\n```js\n<Sae\n  onChangeText={(text) => { this.setState({textValue: text}) }\n/>\n```\n\n### Props for TextInputEffects with an Icon\n\nThis component needs `Icon` component from `react-native-vector-icons` to operate with icons. You should import it before creating a TextInputEffects component.\n\n`import Icon from 'react-native-vector-icons/FontAwesome';`\n\n| Prop | Type | Description |\n|---|---|---|\n|**`iconClass`**|Object|The Icon component class you've imported from react-native-vector-icons.|\n|**`iconName`**|String|Name of the icon that is passed to Icon component.|\n|**`iconColor`**|String|Applied to the container of the label view.|\n\n\n## Example\n\nSee [TextInputEffectsExample.js](Example/TextInputEffectsExample.js) file.\n\nFollow those steps to run the example:\n\n1. Clone the repo `git clone https://github.com/halilb/react-native-textinput-effects && cd react-native-textinput-effects/Example`\n2. Install dependencies `npm install``\n3. Follow [official instructions](https://facebook.github.io/react-native/docs/getting-started.html) to run the example project in a simulator or device.\n\nYou can also check out the example library without any installation on [Appetize.io](https://appetize.io/app/uhgu1wc1htqfcf7bp812gevr2r?device=iphone6s&scale=75&orientation=portrait&osVersion=9.3)!\n\n## Input Types\n\n### Sae\n\n![](screenshots/sae.gif)\n\n\n```js\nimport FontAwesomeIcon from 'react-native-vector-icons/FontAwesome';\nimport { Sae } from 'react-native-textinput-effects';\n\nconst saeInput = (\n  <Sae\n    label={'Email Address'}\n    iconClass={FontAwesomeIcon}\n    iconName={'pencil'}\n    iconColor={'white'}\n    // TextInput props\n    autoCapitalize={'none'}\n    autoCorrect={false}\n  />\n);\n```\n\n### Fumi\n\n![](screenshots/fumi.gif)\n\n\n```js\nimport FontAwesomeIcon from 'react-native-vector-icons/FontAwesome';\nimport { Fumi } from 'react-native-textinput-effects';\n\nconst fumiInput = (\n  <Fumi\n    label={'Course Name'}\n    iconClass={FontAwesomeIcon}\n    iconName={'university'}\n    iconColor={'#f95a25'}\n  />\n);\n```\n### Kohana\n\n![](screenshots/kohana.gif)\n\n\n```js\nimport MaterialsIcon from 'react-native-vector-icons/MaterialIcons';\nimport { Kohana } from 'react-native-textinput-effects';\n\nconst kohanaInput = (\n  <Kohana\n    style={{ backgroundColor: '#f9f5ed' }}\n    label={'Line'}\n    iconClass={MaterialsIcon}\n    iconName={'directions-bus'}\n    iconColor={'#f4d29a'}\n    labelStyle={{ color: '#91627b' }}\n    inputStyle={{ color: '#91627b' }}\n  />\n);\n```\n\n### Makiko\n\n![](screenshots/makiko.gif)\n\n\n```js\nimport FontAwesomeIcon from 'react-native-vector-icons/FontAwesome';\nimport { Makiko } from 'react-native-textinput-effects';\n\nconst makikoInput = (\n  <Makiko\n    label={'Comment'}\n    iconClass={FontAwesomeIcon}\n    iconName={'comment'}\n    iconColor={'white'}\n    inputStyle={{ color: '#db786d' }}\n  />\n);\n```\nNote: Icon component expands and covers the input. So, the icon should not have any blank spaces for the animation experience. This is the limitation for Makiko.\n\n### Isao\n\n![](screenshots/isao.gif)\n\n\n```js\nimport { Isao } from 'react-native-textinput-effects';\n\nconst isaoInput = (\n  <Isao\n    label={'First Name'}\n    // this is applied as active border and label color\n    activeColor={'#da7071'}\n    // this is applied as passive border and label color\n    passiveColor={'#dadada'}\n  />\n);\n```\n\n### Hoshi\n\n![](screenshots/hoshi.gif)\n\n\n```js\nimport { Hoshi } from 'react-native-textinput-effects';\n\nconst hoshiInput = (\n  <Hoshi\n    label={'Town'}\n    // this is used as active border color\n    borderColor={'#b76c94'}\n    // this is used to set backgroundColor of label mask.\n    // please pass the backgroundColor of your TextInput container.\n    backgroundColor={'#F9F7F6'}\n  />\n);\n```\n\n### Jiro\n\n![](screenshots/jiro.gif)\n\n\n```js\nimport { Jiro } from 'react-native-textinput-effects';\n\nconst jiroInput = (\n  <Jiro\n    label={'Dog\\'s name'}\n    // this is used as active and passive border color\n    borderColor={'#9b537a'}\n    inputStyle={{ color: 'white' }}\n  />\n);\n```\n\n### Kaede\n\n![](screenshots/kaede.gif)\n\n\n```js\nimport { Kaede } from 'react-native-textinput-effects';\n\nconst kaedeInput = (\n  <Kaede\n    label={'Website'}\n  />\n);\n```\n\n### Akira\n\n![](screenshots/akira.gif)\n\n\n```js\nimport { Akira } from 'react-native-textinput-effects';\n\nconst akiraInput = (\n  <Akira\n    label={'First Name'}\n    // this is used as active and passive border color\n    borderColor={'#a5d1cc'}\n    labelStyle={{ color: '#ac83c4' }}\n  />\n);\n```\n\n### Madoka\n\n![](screenshots/madoka.gif)\n\n\n```js\nimport { Madoka } from 'react-native-textinput-effects';\n\nconst madokaInput = (\n  <Madoka\n    label={'Frequency'}\n    // this is used as active and passive border color\n    borderColor={'#aee2c9'}\n    labelStyle={{ color: '#008445' }}\n    inputStyle={{ color: '#f4a197' }}\n  />\n);\n```\n\n### Hideo\n\n![](screenshots/hideo.gif)\n\n\n```js\nimport FontAwesomeIcon from 'react-native-vector-icons/FontAwesome';\nimport { Hideo } from 'react-native-textinput-effects';\n\nconst hideoInput = (\n  <Hideo\n    iconClass={FontAwesomeIcon}\n    iconName={'envelope'}\n    iconColor={'white'}\n    // this is used as backgroundColor of icon container view.\n    iconBackgroundColor={'#f2a59d'}\n    inputStyle={{ color: '#464949' }}\n  />\n);\n```\n\n## Licence\n[MIT](http://opensource.org/licenses/mit-license.html)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/halilb/react-native-textinput-effects.git"
  },
  "scripts": {},
  "version": "0.3.1"
}
